@page "/Cliente/Create"
@inject ClientesService clientesService
@inject TecnicosService tecnicosService
@rendermode InteractiveServer

@*HTML*@
<PageTitle>Create</PageTitle>
<EditForm Model="Cliente" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />

	@* Label para notificaciones *@
	<label style="color:red;" hidden="@string.IsNullOrEmpty(ErrorNombre)">@ErrorNombre</label>
	<label style="color:green;" hidden="@string.IsNullOrEmpty(GuardarExito)">@GuardarExito</label>

	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header text-center">
				<h5 class="card-title">Registro de Tecnicos</h5>
			</div>

			<div class="card-body">

				@* ClienteId *@
				<div class="mb-3">
					<label class="form-label"><strong>ClienteId</strong></label>
					<InputNumber class="form-control" @bind-Value="Cliente.ClienteId" readonly></InputNumber>
				</div>

				@* Nombre *@
				<div class="mb-3">
					<label class="form-label"><strong>Nombres</strong></label>
					<InputText class="form-control" @bind-Value="Cliente.Nombres"></InputText>
					<ValidationMessage For="(() => Cliente.Nombres)" />
				</div>

				@* Rnc *@
				<div class="mb-3">
					<label class="form-label"><strong>RNC</strong></label>
					<InputNumber class="form-control" @bind-Value="Cliente.Rnc"></InputNumber>
					<ValidationMessage For="(() => Cliente.Rnc)" />
				</div>

				@* LimiteCredito *@
				<div class="mb-3">
					<label class="form-label"><strong>Limite de Credito</strong></label>
					<InputNumber class="form-control" @bind-Value="Cliente.LimiteCredito"></InputNumber>
					<ValidationMessage For="(() => Cliente.LimiteCredito)" />
				</div>

				@* Tecnico *@
				<div class="mb-3">
					<label class="form-label"><strong>Tecnico</strong></label>

					<div class="input-group">
						<InputSelect class="form-control form-select" @bind-Value="Cliente.TecnicoId">
							<option value="" selected disabled>Elija una opcion</option>
							@foreach (var tecnico in ListaTecnicos){
								<option value="@tecnico.TecnicoId">@tecnico.Nombres</option>
							}
						</InputSelect>
					</div>
				</div>

			</div>

			@* Footer *@
			<div class="card-footer text-center mt-2">
				<a href="/Tecnico/Index" class="btn btn-outline-danger"><span class="bi bi-arrow-left"></span>Volver</a>
				<button type="submit" class="btn btn-outline-success bi bi-floppy">Guardar</button>
				<button type="reset" class="btn btn-outline-primary bi bi-plus" @onclick="Nuevo">Nuevo</button>
			</div>
		</div>
	</div>
</EditForm>


@code {
	private Clientes Cliente { get; set; } = new Clientes();
	private string ErrorNombre { get; set; } = string.Empty;
	private string GuardarExito { get; set; } = string.Empty;
	public List<Tecnicos> ListaTecnicos { get; set; } = [];

	public void Nuevo()
	{
		this.Cliente = new Clientes();
	}

	protected override async Task OnInitializedAsync()
	{
		ListaTecnicos = await tecnicosService.Listar(t => t.TecnicoId > 0);
	}

	private async Task<bool> Validar()
	{
		ErrorNombre = string.Empty;

		if (await clientesService.ExisteNombre(Cliente.Nombres))
		{
			ErrorNombre = "Ya existe un cliente con este nombre";
			return false;
		}
		if(await clientesService.ExisteRNC(Cliente.Rnc)){
			ErrorNombre = "RNC ya esta en uso";
			return false;
		}
		return true;
	}

	public async Task Guardar()
	{
		ErrorNombre = string.Empty;
		GuardarExito = string.Empty;

		if (!await Validar())
		{
			return;
		}
		var guardo = await clientesService.Guardar(this.Cliente);
		if (guardo != null)
		{
			GuardarExito = "Cliente Guardado Correctamente";
			Nuevo();
		}
		else
		{
			ErrorNombre = "Error al guardar el Registro";
		}

	}

}
