@page "/Ticket/Index"

@inject TecnicosService tecnicosService
@inject ClientesService clientesService
@inject TicketsService ticketsService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

@* HTML *@
<PageTitle>Registro de Tickets</PageTitle>
<div class="container">
    <div class="card shadow-lg">
        <div class="card-header space-between">
            <h5 class="card-title">Registro de Tickets</h5>
            <a href="/Ticket/Create" class="btn btn-primary"> <span class="bi bi-plus-square mt-3"></span> Crear</a>
        </div>

        <div class="card-body">

            @*labels*@
            <div class="row">

                @*Filtrar por*@
                <div class="col-3">
                    <label class="col-form-label"><strong>Filtrar por</strong></label>
                </div>

                @*ValorFiltro*@
                <div class="col-4">
                    <label class="col-form-label"><strong>Busqueda</strong></label>
                </div>
            </div>

            @*Inputs y botones*@
            <div class="row align-items-center">
                @*filtro*@
                <div class="col-3">
                    <InputSelect class="form-select" @bind-Value="Filtro">
                        <option value="" selected disabled>Elija una opcion</option>
                        <option value="TicketId">TicketId</option>
                        <option value="Baja">Baja</option>
                        <option value="Media">Media</option>
                        <option value="Alta">Alta</option>
                        <option value="Critica">Critica</option>
                    </InputSelect>
                </div>

                @*Busqueda*@
                <div class="col-4">
                    <div class="input-group">
                        <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                        <button type="button" class="btn btn-outline-primary bi bi-search" @onclick="Buscar"></button>
                    </div>
                </div>

            </div>
            @* Tabla *@
            <table class="table table-hover">
                <thead class="table  table-striped text-black">
                    <tr>
                        <th>TicketId</th>
                        <th>Prioridad</th>
                        <th>Fecha</th>
                        <th>Tecnico Encargado</th>
                        <th>Cliente</th>
                        <th>Editar</th>
                        <th>Eliminar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var ticket in ListaTickets)
                    {
                        <tr>
                            <td> @ticket.TicketId</td>
                            <td> @ticket.Prioridad</td>
                            <td> @ticket.Fecha.ToString("dd/MM/yyyy")</td>
                            <td> @ticket.Tecnico?.Nombres</td>
                            <td> @ticket.Cliente?.Nombres</td>

                            <td>
                                <a href="/Ticket/Edit/@ticket.TicketId" class="btn btn-outline-primary bi bi-pencil-square"></a>
                            </td>
                            <td>
                                <a href="/Ticket/Eliminar/@ticket.TicketId" class="btn btn-outline-danger bi bi-trash"></a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    public List<Tickets> ListaTickets { get; set; } = new List<Tickets>();
    public List<Tecnicos> ListaTecnicos { get; set; } = new List<Tecnicos>();
    public List<Clientes> ListaClientes { get; set; } = new List<Clientes>();

    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ListaTickets = await ticketsService.Listar(t => t.TicketId > 0);
    }

    private async Task Buscar()
    {
        switch(Filtro){
            case "TicketId":
                if (int.TryParse(ValorFiltro, out var ticketId))
                {
                    ListaTickets = await ticketsService
                        .Listar(t => t.TicketId == ticketId);
                }
                break;

            case "Baja":
                if (!string.IsNullOrEmpty(ValorFiltro))
                {
                    ListaTickets = await ticketsService
                        .Listar(t => t.Prioridad.ToLower().Contains("baja"));
                }
                break;

            case "Media":
                if (!string.IsNullOrEmpty(ValorFiltro))
                {
                    ListaTickets = await ticketsService
                        .Listar(t => t.Prioridad.ToLower().Contains("media"));
                }
                break;

            case "Alta":
                if (!string.IsNullOrEmpty(ValorFiltro))
                {
                    ListaTickets = await ticketsService
                        .Listar(t => t.Prioridad.ToLower().Contains("alta"));
                }
                break;

            case "Critica":
                if (!string.IsNullOrEmpty(ValorFiltro))
                {
                    ListaTickets = await ticketsService
                        .Listar(t => t.Prioridad.ToLower().Contains("critica"));
                }
                break;
        }

        StateHasChanged();

    }
    private async Task Restablecer()
    {
        ListaClientes = await clientesService.Listar(c => c.ClienteId > 0);
        Filtro = string.Empty;
        ValorFiltro = string.Empty;
    }
}
